/* GAMEBOARDS STRUCTURE ***********/

.display {
  --rows: 10;
  --cols: 10;
  --board-border: 0.2em;
  --board-padding: 0.3em;
  --board-width: calc(var(--square-size) * var(--cols) + calc(calc(var(--board-border) + var(--board-padding)) * 2));
  --board-height: calc(var(--square-size) * var(--rows) + calc(calc(var(--board-border) + var(--board-padding)) * 2));

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 0.6em;
  padding: clamp(1em, min(5vh, 3vw), 2.5em);
}

.display__name {
  align-self: flex-start;
  font-size: var(--fs-300);
}

.display__gameboard {
  position: relative;
  min-width: var(--board-width);
  min-height: var(--board-height);
  border-width: var(--board-border);
  border-style: solid;
  border-color: var(--color-300);
  padding: var(--board-padding);
  background-color: var(--color-900);
  overflow: hidden;
}

.display__gameboard:hover {
  border-image-slice: 1;
  border-image-source: var(--gradient-silver);
}

.display__gameboard > * {
  position: absolute;
}

.display__grid {
  display: grid;
  grid-template-rows: repeat(var(--rows), var(--square-size));
}

.display__grid--human {
  background: var(--gradient-human-board);
}

.row {
  display: grid;
  grid-template-columns: repeat(var(--cols), var(--square-size));
}

/* SQUARES ***********/

.square {
  overflow: visible;
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100% 100%;
  outline-width: 1px;
  outline-style: solid;
  outline-offset: -0.15rem;
}

.display__grid--human .square {
  outline-color: var(--color-player);
}

.display__grid--cpu .square {
  outline-color: var(--color-cpu);
  cursor: crosshair;
}

.display__grid--cpu .square:not(.occupied):not(.miss):not(.hit):not(.close):not(.sunk):hover {
  /* Hover untouched squares */
  background-color: var(--color-cpu-alpha);
}

/* Squares status */

.close,
.miss {
  background: var(--gradient-miss);
}

.sunk,
.hit {
  background: var(--gradient-hit);
}

.explosion {
  position: absolute;
  width: var(--square-size);
  height: var(--square-size);
  z-index: 1;
}

/* Strategy Board */

.display--strategy #human-board .square:not(.occupied) {
  position: relative;
}

.display--strategy #human-board .square:not(.occupied)::after {
  content: '~~';
  color: var(--color-player-alpha);
  font-family: var(--sec-ff);
  display: block;
  width: 100%;
  height: 100%;
  top: 25%;
  left: -25%;
  position: absolute;
  pointer-events: none;
}

.display--strategy #human-board[data-activeAxis=x] .square:not(.occupied)::after {
  animation: x-axis 700ms infinite steps(3);
}

@keyframes x-axis {
  from { transform: translateX(0%); }
  to { transform: translateX(100%); }
}

.display--strategy #human-board[data-activeAxis=y] .square:not(.occupied)::after {
  animation: y-axis 600ms infinite steps(3);
}

@keyframes y-axis {
  from { transform: rotateZ(90deg) translateX(0%); }
  to { transform: rotateZ(90deg) translateX(100%); }
}

/* DECORATIVE ***********/

/* Border */

.display__gameboard svg {
  width: calc(var(--square-size) * var(--rows));
  height: calc(var(--square-size) * var(--cols));
}

.dashed-border {
  --spin-dasharray: calc(var(--square-size) * var(--rows));
  --static-dasharray: calc(var(--spin-dasharray) / 2);

  stroke-width: 5px;
  stroke-dasharray: var(--static-dasharray) var(--static-dasharray);
  stroke-dashoffset: calc(var(--spin-dasharray) / 4);
}

.active ~ svg .dashed-border {
  animation: stroke-spin 1s linear infinite;
}

@keyframes stroke-spin {
  from { stroke-dashoffset: var(--spin-dasharray); }
  to { stroke-dashoffset: 0; }
}

.display--strategy .dashed-border,
.display--defense .dashed-border {
  stroke: var(--color-player);
}

.display--attack .dashed-border {
  stroke: var(--color-cpu);
}

/* Radar */

.gameboard-display__radar-signal {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 50%;
  left: 50%;
  transform-origin: 0 0;
  background-image: var(--gradient-radar-sweep);
  animation: sweep 5s infinite linear;
}

@keyframes sweep {
  to { transform: rotateZ(360deg); }
}